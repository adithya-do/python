#!/usr/bin/env python3

import os
import subprocess
import json
import datetime
import socket

CONFIG_FILE = "/opt/oracle/scripts/gg_monitoring/ogg_homes.txt"
ALERTS_FILE = "/opt/oracle/scripts/gg_monitoring/alerts.json"
ALERT_HISTORY_FILE = "/opt/oracle/scripts/gg_monitoring/alert_history.json"
SUMMARY_SENT_FILE = "/opt/oracle/scripts/gg_monitoring/summary_sent.json"
EMAIL_RECIPIENT = "abc@abc.com"

HOSTNAME = socket.gethostname()

# Ensure files exist
for f in [ALERTS_FILE, ALERT_HISTORY_FILE, SUMMARY_SENT_FILE]:
    if not os.path.exists(f):
        with open(f, 'w') as fp:
            json.dump({} if 'alerts' in f else [], fp)

with open(ALERTS_FILE) as f:
    active_alerts = json.load(f)

with open(ALERT_HISTORY_FILE) as f:
    alert_history = json.load(f)

def send_email(recipient, subject, html_body):
    message = f"Subject: {subject}\nContent-Type: text/html\n\n{html_body}"
    process = subprocess.Popen(['/usr/sbin/sendmail', recipient], stdin=subprocess.PIPE)
    process.communicate(message.encode())

def parse_ogg_homes():
    homes = []
    with open(CONFIG_FILE) as f:
        for line in f:
            parts = line.strip().split()
            if len(parts) >= 3:
                homes.append({'home': parts[0], 'contact': parts[1], 'db': parts[2]})
    return homes

def check_gg_process(ogg_home):
    try:
        cmd = f"cd {ogg_home} && ./ggsci <<EOF\ninfo all\nEOF"
        output = subprocess.check_output(cmd, shell=True, universal_newlines=True)
        return output
    except Exception as e:
        return f"Error running ggsci: {e}"

def parse_process_output(output):
    lines = output.splitlines()
    status = {}
    for line in lines:
        if any(state in line for state in ["STOP", "ABEND"]):
            status[line.strip()] = "CRITICAL"
        elif "RUNNING" not in line and ("MANAGER" in line or "EXTRACT" in line or "REPLICAT" in line):
            status[line.strip()] = "WARNING"
    return status

def update_alerts(processes, ogg_home, db_name, contact):
    global active_alerts
    now = datetime.datetime.now().isoformat()
    alerts_triggered = 0

    for proc, severity in processes.items():
        key = f"{ogg_home}:{proc}"
        if key not in active_alerts:
            active_alerts[key] = {
                'db': db_name,
                'ogg_home': ogg_home,
                'contact': contact,
                'hostname': HOSTNAME,
                'process': proc,
                'severity': severity,
                'first_seen': now
            }
            subject = f"[{severity}] GoldenGate Alert: {proc} on {db_name}@{HOSTNAME}"
            body = f"""
            <html>
            <b>Alert: {severity}</b><br>
            <b>Database:</b> {db_name}<br>
            <b>Host:</b> {HOSTNAME}<br>
            <b>Process:</b> {proc}<br>
            <b>GoldenGate Home:</b> {ogg_home}<br>
            <b>Time:</b> {now}<br>
            </html>
            """
            send_email(contact, subject, body)
            alerts_triggered += 1
    return alerts_triggered

def clear_resolved_alerts(current_keys):
    cleared = []
    for key in list(active_alerts.keys()):
        if key not in current_keys:
            cleared.append(key)
            del active_alerts[key]
    return cleared

def record_daily_summary():
    today = datetime.date.today().isoformat()
    count = len(active_alerts)
    alert_history.append({'date': today, 'count': count})
    if len(alert_history) > 7:
        alert_history.pop(0)
    with open(ALERT_HISTORY_FILE, 'w') as f:
        json.dump(alert_history, f)

def generate_html_bar(count, max_count):
    if max_count == 0:
        return ''
    width = int((count / max_count) * 200)  # max bar width 200px
    return f'<div style="background:#4CAF50;width:{width}px;height:15px;display
